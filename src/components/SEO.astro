---
import type { CollectionEntry } from 'astro:content';

interface Props {
  entry: CollectionEntry<'blog'>;
  siteUrl: string;
  defaultImage: string;
  defaultLocale?: string;
}

const { entry, siteUrl, defaultImage, defaultLocale = "es_ES" } = Astro.props;
const { data, slug } = entry;

const {
  title,
  description,
  date,
  modifiedDate,
  tags,
  draft,
  image,
  image_alt,
  keywords,
  twitter_img,
  twitterCreator,
  twitterSite,
  canonicalUrl,
  author,
  authorUrl,
  authorImage,
  ogType = "article",
  siteName,
  noindex,
  nofollow,
} = data;

// Generate the canonical URL
const fullCanonicalUrl = canonicalUrl ||  Astro.url.href;

// Generate the full image (using the site's base URL)
const fullImageUrl = image ? `${siteUrl}${image}` : defaultImage;
const fullTwitterImageUrl = twitter_img ? `${siteUrl}${twitter_img}` : fullImageUrl;

// Meta robots
const metaRobots: string[] = [];
if (noindex) metaRobots.push('noindex');
if (nofollow) metaRobots.push('nofollow');
const robotsContent = metaRobots.join(', ');

// Schema.org (JSON-LD)
const schemaOrgJSON = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": title,
  "description": description,
  "url": fullCanonicalUrl,
  "datePublished": date.toISOString(),
  "dateModified": modifiedDate || date.toISOString(),
  "author": {
    "@type": "Person",
    "name": author,
    "url": authorUrl,
    "image": authorImage ? `${siteUrl}${authorImage}` : undefined,
  },
  "publisher": {
    "@type": "Organization",
    "name": siteName,
    "logo": {
      "@type": "ImageObject",
      "url": `${siteUrl}/logo.png`, // Ajusta la ruta del logo
    },
  },
  "image": fullImageUrl,
  "keywords": keywords?.join(', '),
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": fullCanonicalUrl,
  },
};
---

<!-- Title -->
<title>{title}</title>

<!-- Description -->
{description && <meta name="description" content={description} />}

<!-- Keywords -->
{keywords && keywords.length > 0 && (
  <meta name="keywords" content={keywords.join(', ')} />
)}

<!-- Robots -->
{robotsContent && <meta name="robots" content={robotsContent} />}

<!-- Open Graph / Facebook -->
<meta property="og:type" content={ogType} />
<meta property="og:title" content={title} />
{description && <meta property="og:description" content={description} />}
<meta property="og:image" content={fullImageUrl} />
{siteName && <meta property="og:site_name" content={siteName} />}
<meta property="og:locale" content={defaultLocale} />
<meta property="og:url" content={fullCanonicalUrl} />

<!-- Twitter -->
<meta name="twitter:card" content="summary_large_image" />
{twitterSite && <meta name="twitter:site" content={twitterSite} />}
{twitterCreator && <meta name="twitter:creator" content={twitterCreator} />}
<meta name="twitter:title" content={title} />
{description && <meta name="twitter:description" content={description} />}
<meta name="twitter:image" content={fullTwitterImageUrl} />

<!-- Canonical URL -->
<link rel="canonical" href={fullCanonicalUrl} />

<!-- Autor -->
{author && <meta name="author" content={author} />}
{authorUrl && <link rel="author" href={authorUrl} />}
{authorImage && <meta name="author-image" content={`${siteUrl}${authorImage}`} />}

<!-- Date -->
<meta property="article:published_time" content={date.toISOString()} />
{modifiedDate && (
  <meta property="article:modified_time" content={modifiedDate} />
)}

<!-- Tags -->
{tags && tags.length > 0 && tags.map((tag) => (
  <meta property="article:tag" content={tag} />
))}

<!-- Schema.org (JSON-LD) -->
<script type="application/ld+json" set:html={` ${JSON.stringify(schemaOrgJSON)} `}></script>


<!-- Favicon (opcional) -->
<link rel="icon" type="image/png" href={`${siteUrl}/favicon.png`} />

<!-- Theme Color (opcional) -->
<meta name="theme-color" content="#ffffff" />

<!-- Viewport (opcional) -->
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
